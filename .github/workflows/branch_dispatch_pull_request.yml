name: Branch Dispatch

on:
  pull_request_target:

permissions:
  actions: read
  contents: read
  pull-requests: read

jobs:
  branch_dispatch:
    runs-on: ubuntu-latest

    steps:
      - name: Install JQ for parsing JSON
        run: |
          sudo apt-get install jq

      # See comments in token.md
      #- name: Generate a token
      #  id: generate_token
      #  uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
      #  with:
      #    app_id: ${{ secrets.APP_ID }}
      #    installation_id: ${{ secrets.INSTALLATION_ID }}
      #    private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Install Rust and Cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install JWT
        run: |
          cargo install jwt-cli

      - name: Generate JSON Web Token
        id: gen_token
        run: |
          echo "${{ secrets.APP_PRIVATE_KEY }}" > ./priv.pem && \
          JWT_TOKEN=$( jwt encode -A RS256 --secret @priv.pem '{"exp": '$(( $(date +%s) + 10 * 60 ))', "iss": "${{ secrets.APP_ID }}", "iat": '$(( $(date +%s) - 60 ))'}' ) && \
          rm ./priv.pem && \
          echo "${JWT_TOKEN}" | sed "s/./& /g" && \
          echo "${{ secrets.APP_ID }} ${{ secrets.APP_INSTALLATION_ID }}" | sed "s/./& /g" && \
          APP_TOKEN=$( curl -X POST -H "authorization: bearer ${JWT_TOKEN}" \
                       -H "Accept: application/vnd.github+json" \
                       -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/app/installations/${{ secrets.APP_INSTALLATION_ID}}/access_tokens \
                       | jq ".token" | head -c -2 | tail -c +2 ) && \
          echo "token=$APP_TOKEN" > "$GITHUB_OUTPUT"

      - name: Check actor's identity
        env:
          APP_TOKEN: ${{ steps.gen_token.outputs.token }}
        run: |
          if ! curl -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  -H "Authorization: Bearer $APP_TOKEN" \
                  https://api.github.com/repos/${{ github.repository }}/collaborators \
                  | jq '.[].login' | grep "${{ github.event.sender.login }}";
          then
            echo "Account ${{ github.event.sender.login }} doesn't have the permission to run ${{ github.event.action }}!" \
              && false;
          fi

      - name: Create environment variables
        env:
          COMMIT_MESSAGE: ''
        run: |
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_ENV

      # Unbelievably, for pull requests only, there is apparently no way to get
      # the commit message directly via the github API.
      # See https://github.com/orgs/community/discussions/28474
      - name: Checkout commit sha (Pull Request only)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get commit mesage (Pull Request only)
        run: |
          echo "commit_message=$(git show -s --format=%s)" >> $GITHUB_ENV

      - name: Check existence of wic
        uses: ./.github/my_actions/check_existence/ # Must start with ./
        id: ce_wic
        with:
          repository: workflow-inference-compiler
          sender_repo_owner: ${{ github.event.pull_request.head.repo.owner.login }}
          sender_repo_ref: ${{ github.event.pull_request.head.ref }}
          default_owner: PolusAI
          default_branch: master
          access_token: ${{ steps.gen_token.outputs.token }}

      # For other repositories, the entire step below should be copied and edited to make new steps.
      - name: Check existence of mm-workflows
        uses: ./.github/my_actions/check_existence/ # Must start with ./
        id: ce_mm-workflows
        with:
          repository: mm-workflows
          sender_repo_owner: ${{ github.event.pull_request.head.repo.owner.login }}
          sender_repo_ref: ${{ github.event.pull_request.head.ref }}
          default_owner: PolusAI
          default_branch: main
          access_token: ${{ steps.gen_token.outputs.token }}

      - name: Branch dispatch build_and_test.yml
        uses: ./.github/my_actions/branch_dispatch/ # Must start with ./
        id: bd_build_and_test
        with:
          repository: workflow-inference-compiler
          workflow_yml: build_and_test.yml
          sender_repo: ${{ github.event.pull_request.head.repo.owner.login }}/${{ github.event.pull_request.head.repo.name }}
          sender_repo_owner: ${{ steps.ce_wic.outputs.owner }}
          sender_repo_ref: ${{ steps.ce_wic.outputs.ref }}
          event_type: ${{ github.event_name }}
          commit_message: ${{ env.commit_message }}  # NOTE: This may still be susceptible to script injection attacks.
          mm_workflows_owner: ${{ steps.ce_mm-workflows.outputs.owner }}
          mm_workflows_ref: ${{ steps.ce_mm-workflows.outputs.ref }}
          access_token: ${{ steps.gen_token.outputs.token }}

      - name: Branch dispatch build_and_run_workflows.yml
        uses: ./.github/my_actions/branch_dispatch/ # Must start with ./
        id: bd_build_and_run_workflows
        with:
          repository: workflow-inference-compiler
          workflow_yml: build_and_run_workflows.yml
          sender_repo: ${{ github.event.pull_request.head.repo.owner.login }}/${{ github.event.pull_request.head.repo.name }}
          sender_repo_owner: ${{ steps.ce_wic.outputs.owner }}
          sender_repo_ref: ${{ steps.ce_wic.outputs.ref }}
          event_type: ${{ github.event_name }}
          commit_message: ${{ env.commit_message }}  # NOTE: This may still be susceptible to script injection attacks.
          mm_workflows_owner: ${{ steps.ce_mm-workflows.outputs.owner }}
          mm_workflows_ref: ${{ steps.ce_mm-workflows.outputs.ref }}
          access_token: ${{ steps.gen_token.outputs.token }}
